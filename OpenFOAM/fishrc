#---------------------------------*-fish-*-------------------------------------
# =========                 |
# \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
#  \\    /   O peration     |
#   \\  /    A nd           | Copyright (C) 2012 OpenFOAM Foundation
#    \\/     M anipulation  |
#------------------------------------------------------------------------------
# License
#     This file is part of OpenFOAM.
#
#     OpenFOAM is free software: you can redistribute it and/or modify it
#     under the terms of the GNU General Public License as published by
#     the Free Software Foundation, either version 3 of the License, or
#     (at your option) any later version.
#
#     OpenFOAM is distributed in the hope that it will be useful, but WITHOUT
#     ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
#     FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
#     for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with OpenFOAM.  If not, see <http://www.gnu.org/licenses/>.
#
# File
#     etc/fishrc
#
# Description
#     Startup file for OpenFOAM
#     Sourced from ~/.config/fish/config.fish
#
#------------------------------------------------------------------------------

# Fish bug.
# Removes the name of this script from the argument list
test (echo "$argv[1]" | command grep -e (basename (status -f))\$);
    and set -e argv[1]

set -x WM_PROJECT           OpenFOAM
set -x WM_PROJECT_VERSION   dev

################################################################################
# USER EDITABLE PART: Changes made here may be lost with the next upgrade
#
# either set $FOAM_INST_DIR before sourcing this file or set
# 'foamInstall' below to where OpenFOAM is installed
#
# Location of the OpenFOAM installation
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
set -l foamInstall ~/$WM_PROJECT
# foamInstall=~/$WM_PROJECT
# foamInstall=/opt/$WM_PROJECT
# foamInstall=/usr/local/$WM_PROJECT
#
# END OF (NORMAL) USER EDITABLE PART
################################################################################

#
# These are the defaults for this version which should generally be
# overridden from the prefs.sh file or from command-line specification
#
#- note the location for later use (eg, in job scripts)
if not set -q FOAM_INST_DIR
    set -x FOAM_INST_DIR $foamInstall
end

#- Compiler location:
#    foamCompiler= system | ThirdParty (OpenFOAM)
set -g foamCompiler ThirdParty

#- Compiler:
#    WM_COMPILER = Gcc | Gcc43 | Gcc44 | Gcc45 | Gcc46 | Clang | Icc (Intel icc)
set -x WM_COMPILER Gcc

set -e WM_COMPILER_ARCH
set -e WM_COMPILER_LIB_ARCH

#- Architecture:
#    WM_ARCH_OPTION = 32 | 64
set -x WM_ARCH_OPTION 64

#- Precision:
#    WM_PRECISION_OPTION = DP | SP
set -x WM_PRECISION_OPTION DP

#- Optimised, debug, profiling:
#    WM_COMPILE_OPTION = Opt | Debug | Prof
set -x WM_COMPILE_OPTION Opt

#- MPI implementation:
#    WM_MPLIB = SYSTEMOPENMPI | OPENMPI | MPICH | MPICH-GM | HPMPI
#               | GAMMA | MPI | QSMPI
set -x WM_MPLIB OPENMPI

#- Operating System:
#    WM_OSTYPE = POSIX | ???
set -x WM_OSTYPE POSIX

#- Floating-point signal handling:
#    set or unset
set -x FOAM_SIGFPE ON

#- memory initialisation:
#    set or unset
#set -x FOAM_SETNAN ON


################################################################################

# The old dirs to be cleaned from the various environment variables
# - remove anything under top-level directory.
# NB: the WM_PROJECT_INST_DIR might not be identical between versions
set -l foamOldDirs $FOAM_INST_DIR $WM_PROJECT_SITE $HOME/$WM_PROJECT/$USER

test "$WM_PROJECT_INST_DIR" != "$FOAM_INST_DIR";
    and set -l foamOldDirs $WM_PROJECT_INST_DIR


# Location of installation
# ~~~~~~~~~~~~~~~~~~~~~~~~
set -x WM_PROJECT_INST_DIR $FOAM_INST_DIR
set -x WM_PROJECT_DIR $WM_PROJECT_INST_DIR/$WM_PROJECT-$WM_PROJECT_VERSION

# Location of third-party software
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
set -x WM_THIRD_PARTY_DIR $WM_PROJECT_INST_DIR/ThirdParty-$WM_PROJECT_VERSION

# Location of site-specific templates etc
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# unset is equivalent to $WM_PROJECT_INST_DIR/site
test -d "$WM_PROJECT_SITE";
    and set -x WM_PROJECT_SITE;
    or  set -e WM_PROJECT_SITE

# Location of user files
# ~~~~~~~~~~~~~~~~~~~~~~
set -x WM_PROJECT_USER_DIR $HOME/$WM_PROJECT/$USER-$WM_PROJECT_VERSION


# Print debug info if run from terminal and FOAM_VERBOSE is set
function foamPrintDebug
    set -q FOAM_VERBOSE; and set -q PS1;
        and echo "$argv"
end


# Source files, possibly with some verbosity
function foamSource
    set fileToSource (sh $WM_PROJECT_DIR/bin/foamEtcFile $argv)

    if test -r "$fileToSource"
        foamPrintDebug "Sourcing file $argv"
        . $fileToSource
    end
end


# Evaluate command-line parameters
function foamEval
    for i in $argv
        switch $i
            case '-*'
                # stray option (not meant for us here) -> get out
                break
            case '*='
                # name=       -> set -e name
                foamPrintDebug "Erasing $i"
                eval (echo $i | sed 's/\(.*\)=/set -ge \1/g')
            case '*=*'
                # name=value  -> set -x name value
                foamPrintDebug "Exporting $i"
                eval (echo $i | sed 's/\(.*\)=\(.*\)/set -gx \1 \2/g')
            case '*'
                # filename: source it
                test -f "$i";
                    and . $i;
                    or foamSource -silent $i
        end
    end
end


# Add in preset user or site preferences:
foamSource config/prefs.fish

# Evaluate command-line parameters and record settings for later
# these can be used to set/unset values, or specify alternative pref files
set -x FOAM_SETTINGS $argv
foamEval $FOAM_SETTINGS


# Clean standard environment variables (PATH, LD_LIBRARY_PATH, MANPATH)
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
function foamClean
    set -e tmpPath
    set -e deleteFromPath

    # Remove old path elements
    for pathToRemove in $argv[(seq 2 (count $argv))]
        for pathElement in (seq (count $$argv[1]))
            test (echo $$argv[1][$pathElement] | command grep -e "^$pathToRemove");
                and set deleteFromPath $deleteFromPath $pathElement
        end
    end

    set -q deleteFromPath;
        and set -e $argv[1][$deleteFromPath]

    # Remove duplicates
    for pathElement in $$argv[1]
        not contains (echo $pathElement | sed -e "s@/*\$@@g") $tmpPath;
            and set tmpPath $tmpPath $pathElement
    end

    set -x $argv[1] $tmpPath
end


#- Clean PATH
foamClean PATH $foamOldDirs

#- Clean LD_LIBRARY_PATH
foamClean LD_LIBRARY_PATH $foamOldDirs

#- Clean MANPATH
foamClean MANPATH $foamOldDirs


# Source project setup files
# ~~~~~~~~~~~~~~~~~~~~~~~~~~
. $WM_PROJECT_DIR/etc/config/settings.fish
. $WM_PROJECT_DIR/etc/config/aliases.fish


# Source user setup files for optional packages
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
foamSource config/paraview.fish
foamSource config/ensight.fish


# Clean environment paths again. Only remove duplicates
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#- Clean PATH
foamClean PATH

#- Clean LD_LIBRARY_PATH
foamClean LD_LIBRARY_PATH

#- Clean MANPATH (trailing ':' to find system pages)
foamClean MANPATH

#- Clean LD_PRELOAD
test -n $LD_PRELOAD; and foamClean LD_PRELOAD


# ----------------------------------------------------------------- end-of-file
